# -*- coding: utf-8 -*-
"""SICP5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qunpg8XZNppi0c1wZf-cHzsM77_usKFf
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

url = "https://drive.google.com/uc?id=1hCwrSvLE5EyGDrIHY4S8zWT9a2ScCmIz"
df = pd.read_csv(url)
#https://drive.google.com/file/d/1hCwrSvLE5EyGDrIHY4S8zWT9a2ScCmIz/view?usp=sharing

df.head()

df.info()

"""#Data Preprocessing"""

from sklearn.model_selection import train_test_split
df = pd.read_csv("https://drive.google.com/uc?id=1hCwrSvLE5EyGDrIHY4S8zWT9a2ScCmIz")

print(df.head())


# Fitur numerik
num_features = [
    'Administrative', 'Administrative_Duration', 'Informational', 'Informational_Duration',
    'ProductRelated', 'ProductRelated_Duration', 'BounceRates', 'ExitRates',
    'PageValues', 'SpecialDay'
]

# Konversi kolom kategorikal ke numerik (encoding)
df_encoded = pd.get_dummies(df, columns=['Month', 'OperatingSystems', 'Browser', 'Region', 'TrafficType', 'VisitorType', 'Weekend'], drop_first=True)


X = df_encoded.drop(columns=['Revenue'])
y = df_encoded['Revenue'].astype(int)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report

# 1. Buat model Random Forest untuk klasifikasi
rf = RandomForestClassifier(n_estimators=100, random_state=42)

# 2. Latih model
rf.fit(X_train, y_train)

# 3. Prediksi pada data test
y_pred = rf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Akurasi: {accuracy:.4f}")
print(f"Presisi: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-score: {f1:.4f}")

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""#Model Inference"""

import numpy as np
from sklearn.preprocessing import StandardScaler

# --- INPUT DATA BARU ---
print("Masukkan data pengunjung baru untuk prediksi pembelian:\n")

administrative = int(input("Jumlah halaman administratif: "))
administrative_duration = float(input("Durasi halaman administratif (detik): "))
informational = int(input("Jumlah halaman informasi: "))
informational_duration = float(input("Durasi halaman informasi (detik): "))
product_related = int(input("Jumlah halaman produk: "))
product_related_duration = float(input("Durasi halaman produk (detik): "))
bounce_rates = float(input("Bounce rate (0-1): "))
exit_rates = float(input("Exit rate (0-1): "))
page_values = float(input("Nilai halaman (0-100): "))
special_day = float(input("Special day (0-1): "))

# --- FITUR KATEGORIK ---
month = input("Bulan (misal: Feb, Mar, May): ")
visitor_type = input("Tipe pengunjung (Returning_Visitor, New_Visitor, Other): ")
weekend = input("Apakah kunjungan di akhir pekan? (True/False): ")

# --- BENTUKKAN DATA BARU SESUAI FORMAT TRAINING ---
data_baru = {
    'Administrative': administrative,
    'Administrative_Duration': administrative_duration,
    'Informational': informational,
    'Informational_Duration': informational_duration,
    'ProductRelated': product_related,
    'ProductRelated_Duration': product_related_duration,
    'BounceRates': bounce_rates,
    'ExitRates': exit_rates,
    'PageValues': page_values,
    'SpecialDay': special_day,
    'Month': month,
    'VisitorType': visitor_type,
    'Weekend': weekend
}

new_df = pd.DataFrame([data_baru])
print("\nData baru sebelum encoding:\n", new_df)

# --- ENCODING (harus sama seperti training) ---
new_encoded = pd.get_dummies(new_df, columns=['Month', 'VisitorType', 'Weekend'], drop_first=True)

# Sesuaikan kolom agar sama persis seperti X_train
for col in X_train.columns:
    if col not in new_encoded.columns:
        new_encoded[col] = 0
new_encoded = new_encoded[X_train.columns]

# --- SCALING FITUR NUMERIK ---
scaler = StandardScaler()
scaler.fit(X_train.select_dtypes(include=np.number))  # fit scaler dari data training
new_encoded[X_train.select_dtypes(include=np.number).columns] = scaler.transform(
    new_encoded[X_train.select_dtypes(include=np.number).columns]
)

print("\nData baru setelah preprocessing:\n", new_encoded)

# --- PREDIKSI ---
prediksi_revenue = rf.predict(new_encoded)[0]

# --- HASIL ---
print("\n" + "-" * 40)
print(f"Hasil Prediksi: {'Akan Membeli (Revenue=True)' if prediksi_revenue == 1 else 'Tidak Membeli (Revenue=False)'}")
print("-" * 40)

import joblib

joblib.dump(rf, "rf_model.joblib")
joblib.dump(scaler, "scaler.joblib")
joblib.dump(X.columns.tolist(), "feature_columns.joblib")

print("Model, scaler, dan feature columns berhasil disimpan!")

